{"name":"FireWood Fridge ORM","tagline":"FireWood Fridge ORM, an ORM for Objective-C (iOS and Mac OSX) on top of SQLite","body":"FireWood Fridge ORM\r\n=======\r\n\r\nan ORM for Objective-C (both __iOS__ and __Mac OSX__) on top of SQLite\r\n\r\nIntro\r\n---------------------\r\nModeled after Active Records pattern. It supports relations (many-to-one, one-to-one, one-to-many, many-to-many).\r\n\r\nIt can be deployed both on __iOS__ and __Mac OSX__\r\n\r\nIt's based upon FMDB available at https://github.com/ccgus/fmdb/, an Objective-C wrapper around SQLite: http://sqlite.org/\r\n\t\r\n\r\nHow to use\r\n---------------------\r\n###Quickstart\r\nImport into the XCode Project the `FWF_ORM` folder, __enable ARC__ and add libsqlite3.dylib (in YourProject->BuildPhases->Link Binary With Libraries)\r\n\r\n####An Example\r\n\r\nDefine a class that inherits from `FWFEntity`, that will be our entity.\r\nIn the example we will name it `EntityTest` (wow a name that's unexpectedâ€¦) with an `NSString` attribute `name`.\r\n\r\n___NB:Attributes must be Objects! (see [`newOBJDataTypes` section](#new-obj-datatypes))___\r\n\r\nRemember that you will need to init the persistence f your entities at startup (or before every call)\r\nyou could not do so and use everytime\r\n\r\n\t[[EntityTest alloc] initWithPersistenceCheck];\r\n\t\r\nbut it's faster to init persistence at startup\r\n\t\r\n\t[[EntityTest alloc] initEntityPersistence];\r\n\t\r\nand somewhere else you can use the entity withou any worries\r\n\r\n\tEntityTest *jack = [[EntityTest alloc] init];\r\n\tjack.name = @\"Jack White\"\r\nto save call \r\n\r\n\t[jack save];\r\n\t\r\nsimple huh?\r\n\r\nTo retrieve the object saved:\r\n\r\n\tEntityTest *retrievedobj = [[EntityTest objects] getFirstOrNilWithSQLPredicate:@\"name='Jack White'\"];\r\n\r\nOr a collection of objects:\r\n\r\nthe entire collection\r\n\r\n\tFWFList *listobjs = [[EntityTest objects] all];\r\n\t\r\na part of it (using filters)\r\n\r\n\tFWFList *listobjs = [[EntityTest objects] filterWithSQLPredicate:@\"name like '%Whi%'\"];\r\n\t\r\n###FILTERS\r\n\r\n####SQL based filters\r\n\t\r\nYou can use filter based on SQL (everything is appended after the keyword `WHERE`)\r\n\r\n\tFWFList *listobjs = [[EntityTest objects] filterWithSQLPredicate:@\"name = 'Jack White'\"];\r\n\r\nand chain them together\r\n\r\n\tFWFList *listobjs = [[[EntityTest objects] filterWithSQLPredicate:@\"name like '%Ja%'\"] filterWithSQLPredicate:@\"name like '%White%'\"];\r\n\t\r\nor better (because each call to the filter method executes a query and retrieve the objects, so it consumes resources)\r\n\r\n\tFWFList *listobjs = [EntityTest objects];\r\n\t[listobjs beginSQLChainedFiltering];\r\n\t#add filters\r\n\t[[listobjs filterWithSQLPredicate:@\"name like '%Ja%'\"] filterWithSQLPredicate:@\"name like '%White%'\"];\r\n\t#and now execute each filter called\r\n\t[listobjs executeSQLChainedFiltering];\r\n\r\n####Tip:\r\nThis code\r\n\r\n\tFWFList *listobjs = [[[EntityTest objects] filterWithSQLPredicate:@\"name like '%Ja%'\"] filterWithSQLPredicate:@\"name like '%White%'\"];\r\n\t\r\nor this one\r\n\r\n\tFWFList *listobjs = [EntityTest objects];\r\n\t[listobjs filterWithSQLPredicate:@\"name like '%Ja%'\"]\r\n\t[listobjs filterWithSQLPredicate:@\"name like '%White%'\"];\r\nDoes the same thing\r\n\r\n####NSPredicate based filters\r\nYou can use `NSPredicate` based filters ([sintax help](https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Predicates/predicates.html#//apple_ref/doc/uid/TP40001789))\r\n\r\n\tFWFList *listobjs = [EntityTest objects];\r\n    [listobjs filterWithPredicate:@\"number=11\"];\r\n    [listobjs filterWithPredicate:@\"name like 'Mar*'\"];\r\nYou can chain them togheter but they are executed every time they are called (each filter is executed when called).\r\n\r\n####Tip:\r\nIf you use the filters based on NSPredicate you can't chain after them a SQL based filter (it will overwrite the filtering made by every NSPredicate based filter).\r\n\r\n###SERIALIZE\r\n\r\nThere are also serialization methods available that returns `NSDictionary` or `NSArray` of `NSDictionary`\r\n\r\n\t#for single entities:\r\n\t[retrievedobj serializeWithDictionary];\r\n\t\r\n\t#for collections:\r\n\t[listobjs serializeWithDictionary];\r\n\r\n####Others Examples\r\nYou can try the examples included in the test folder. That folder does not contain dependancies for the FWF ORM.\r\n\r\n\r\nConfigurations\r\n---------------------\r\n###General\r\nThe FWF general configurations are stored into `FWF_Config.h`\r\n\r\n*\tFWF_LAZY_ERRORS FALSE: default is FALSE, and it throw s an exception when incurring in a persistence problem. If TRUE it's more \"lazy\" (less strict) about that.\r\n*\tFWF_DEBUG: default is FALSE, if true the query executed by the FWF ORM are logged\r\n\r\n###Specific\r\nFWFEntity could allow the storage of empty entities (every attribute is null except for the `pk`). \r\nDEFAULT is FALSE\r\nIf you want to allow empty entities, override the method `isNullEntityNotAllowed`, returning false\r\n\r\n\t- (bool) isNullEntityNotAllowed{\r\n    \treturn false;\r\n\tSEp}\r\n\t\r\n\r\nTips\r\n---------------------\r\nThe filters based on SQL are clauses that will be appended in the query after the keyword `WHERE`.\r\n\r\nYou can chain SQL filters, but remember each filter is executed every times it is invoked.\r\nTo avoid that, before executing the chained filters, call `beginSQLChainedFiltering`, and after the last filter (to retrieve the desidered data) call `executeSQLChainedFiltering`.\r\nIf you use the filters based on NSPredicate you can't chain after them a SQL based filter (it will overwrite the filtering made by every NSPredicate based filter).\r\n\r\nIt's better to use SQL based filters because they are faster (expecially with lot of data)\r\n\r\n-------------------\r\nNew OBJ DataTypes\r\n---------------------\r\nThey are available the \"object equivalent\" of some primitive types:\r\n\r\n- OBJBool\r\n- OBJInteger\r\n- OBJUInteger\r\n\r\nUse them safely as attributes of entities.\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/e50a04cf21007790f1c575db22758d6e \"githalytics.com\")](http://githalytics.com/hjgauss/fwf_orm)\r\n\r\n","google":"UA-40604034-2","note":"Don't delete this file! It's used internally to help with page regeneration."}